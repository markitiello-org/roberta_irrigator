<html>
  <head>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link
      rel="stylesheet"
      as="style"
      onload="this.rel='stylesheet'"
      href="https://fonts.googleapis.com/css2?display=swap&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900&amp;family=Space+Grotesk%3Awght%40400%3B500%3B700"
    />

    <title>Stitch Design</title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />

    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
  </head>
  <body>
    <div class="relative flex size-full min-h-screen flex-col bg-slate-50 group/design-root overflow-x-hidden" style='font-family: "Space Grotesk", "Noto Sans", sans-serif;'>
      <div class="layout-container flex h-full grow flex-col">
        <%- include('partials/menu.ejs') %>
        <div class="px-40 flex flex-1 justify-center py-5">
          <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
            <div class="flex flex-wrap justify-between gap-3 p-4">
              <div class="flex min-w-72 flex-col gap-3">
                <p class="text-[#0e151b] tracking-light text-[32px] font-bold leading-tight">Dashboard</p>
                <p class="text-[#4e7997] text-sm font-normal leading-normal">Overview of your irrigation system</p>
              </div>
            </div>
            <h2 class="text-[#0e151b] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">Zone Status</h2>
            <div class="px-4 py-3 @container">
              <div class="flex overflow-hidden rounded-lg border border-[#d0dde7] bg-slate-50">
                <table class="flex-1">
                  <thead>
                    <tr class="bg-slate-50">
                      <th class="table-d641b1a4-d5fb-4b0a-ac44-f198b9246e08-column-120 px-4 py-3 text-left text-[#0e151b] w-[400px] text-sm font-medium leading-normal">Zone</th>
                      <th class="table-d641b1a4-d5fb-4b0a-ac44-f198b9246e08-column-240 px-4 py-3 text-left text-[#0e151b] w-60 text-sm font-medium leading-normal">Status</th>
                      <th class="table-d641b1a4-d5fb-4b0a-ac44-f198b9246e08-column-360 px-4 py-3 text-left text-[#0e151b] w-[400px] text-sm font-medium leading-normal">
                        Next Scheduled Start
                      </th>
                    </tr>
                  </thead>
                  <tbody id="zone-table-body">
                    <!-- Zones will be loaded dynamically -->
                  </tbody>
                </table>
              </div>
              <style>
                          @container(max-width:120px){.table-d641b1a4-d5fb-4b0a-ac44-f198b9246e08-column-120{display: none;}}
                @container(max-width:240px){.table-d641b1a4-d5fb-4b0a-ac44-f198b9246e08-column-240{display: none;}}
                @container(max-width:360px){.table-d641b1a4-d5fb-4b0a-ac44-f198b9246e08-column-360{display: none;}}
              </style>
            </div>
            <h2 class="text-[#0e151b] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">Manual Control</h2>
            <div class="flex justify-stretch">
              <div class="flex flex-1 gap-3 flex-wrap px-4 py-3 justify-between">
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#1990e5] text-slate-50 text-sm font-bold leading-normal tracking-[0.015em]"
                >
                  <span class="truncate">Turn All Zones On</span>
                </button>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#e7eef3] text-[#0e151b] text-sm font-bold leading-normal tracking-[0.015em]"
                >
                  <span class="truncate">Turn All Zones Off</span>
                </button>
              </div>
            </div>
            <h2 class="text-[#0e151b] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">Upcoming Schedule</h2>
            <div class="flex items-center gap-4 bg-slate-50 px-4 min-h-[72px] py-2">
              <div class="text-[#0e151b] flex items-center justify-center rounded-lg bg-[#e7eef3] shrink-0 size-12" data-icon="Clock" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                  <path
                    d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216Zm64-88a8,8,0,0,1-8,8H128a8,8,0,0,1-8-8V72a8,8,0,0,1,16,0v48h48A8,8,0,0,1,192,128Z"
                  ></path>
                </svg>
              </div>
              <div class="flex flex-col justify-center">
                <p class="text-[#0e151b] text-base font-medium leading-normal line-clamp-1">Today, 6:00 PM</p>
                <p class="text-[#4e7997] text-sm font-normal leading-normal line-clamp-2">Front Yard</p>
              </div>
            </div>
            <div class="flex items-center gap-4 bg-slate-50 px-4 min-h-[72px] py-2">
              <div class="text-[#0e151b] flex items-center justify-center rounded-lg bg-[#e7eef3] shrink-0 size-12" data-icon="Clock" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                  <path
                    d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216Zm64-88a8,8,0,0,1-8,8H128a8,8,0,0,1-8-8V72a8,8,0,0,1,16,0v48h48A8,8,0,0,1,192,128Z"
                  ></path>
                </svg>
              </div>
              <div class="flex flex-col justify-center">
                <p class="text-[#0e151b] text-base font-medium leading-normal line-clamp-1">Today, 7:00 PM</p>
                <p class="text-[#4e7997] text-sm font-normal leading-normal line-clamp-2">Garden</p>
              </div>
            </div>
            <div class="flex items-center gap-4 bg-slate-50 px-4 min-h-[72px] py-2">
              <div class="text-[#0e151b] flex items-center justify-center rounded-lg bg-[#e7eef3] shrink-0 size-12" data-icon="Clock" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                  <path
                    d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216Zm64-88a8,8,0,0,1-8,8H128a8,8,0,0,1-8-8V72a8,8,0,0,1,16,0v48h48A8,8,0,0,1,192,128Z"
                  ></path>
                </svg>
              </div>
              <div class="flex flex-col justify-center">
                <p class="text-[#0e151b] text-base font-medium leading-normal line-clamp-1">Tomorrow, 7:00 AM</p>
                <p class="text-[#4e7997] text-sm font-normal leading-normal line-clamp-2">Back Yard</p>
              </div>
            </div>
            <div class="flex items-center gap-4 bg-slate-50 px-4 min-h-[72px] py-2">
              <div class="text-[#0e151b] flex items-center justify-center rounded-lg bg-[#e7eef3] shrink-0 size-12" data-icon="Clock" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                  <path
                    d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216Zm64-88a8,8,0,0,1-8,8H128a8,8,0,0,1-8-8V72a8,8,0,0,1,16,0v48h48A8,8,0,0,1,192,128Z"
                  ></path>
                </svg>
              </div>
              <div class="flex flex-col justify-center">
                <p class="text-[#0e151b] text-base font-medium leading-normal line-clamp-1">Tomorrow, 8:00 AM</p>
                <p class="text-[#4e7997] text-sm font-normal leading-normal line-clamp-2">Vegetable Patch</p>
              </div>
            </div>
            <h2 class="text-[#0e151b] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">Quick Actions</h2>
            <div class="flex justify-stretch">
              <div class="flex flex-1 gap-3 flex-wrap px-4 py-3 justify-between">
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#e7eef3] text-[#0e151b] text-sm font-bold leading-normal tracking-[0.015em]"
                >
                  <span class="truncate">Configure Zones</span>
                </button>
                <button
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#e7eef3] text-[#0e151b] text-sm font-bold leading-normal tracking-[0.015em]"
                >
                  <span class="truncate">System Settings</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <script>
      // Function to format time for display
      function formatTime(timeStr) {
        if (!timeStr) return 'N/A';
        try {
          const [hours, minutes] = timeStr.split(':');
          const hour = parseInt(hours);
          const ampm = hour >= 12 ? 'PM' : 'AM';
          const displayHour = hour % 12 || 12;
          return `${displayHour}:${minutes} ${ampm}`;
        } catch {
          return timeStr;
        }
      }

      // Function to get next irrigation time
      function getNextIrrigation(irrigationInfo) {
        if (!irrigationInfo || irrigationInfo.length === 0) return 'Not scheduled';
        
        const now = new Date();
        const today = now.getDay(); // 0 = Sunday, 1 = Monday, etc.
        
        // Find next irrigation time
        for (const schedule of irrigationInfo) {
          if (schedule.day_of_the_week && schedule.day_of_the_week.includes(today)) {
            return `Today, ${formatTime(schedule.time_to_start)}`;
          }
        }
        
        // If no irrigation today, show next available day
        return 'Next available day';
      }

      // Function to toggle zone status
      async function toggleZone(zoneId, isOpen) {
        try {
          const action = isOpen ? 'close' : 'open';
          
          // Show confirmation dialog only when opening a zone
          if (!isOpen) {
            const zoneName = document.querySelector(`[onclick="toggleZone(${zoneId}, ${isOpen})"]`)
              ?.closest('tr')?.querySelector('td')?.textContent?.trim() || 'Zone';
            
            if (!confirm(`Are you sure you want to turn ON ${zoneName}?`)) {
              return;
            }
          }
          
          const response = await fetch(`http://localhost:8080/zones/${zoneId}/${action}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            }
          });
          
          if (response.ok) {
            // Refresh the zone data
            loadZones();
          } else {
            console.error('Failed to toggle zone:', response.statusText);
          }
        } catch (error) {
          console.error('Error toggling zone:', error);
        }
      }

      // Function to load and display zones
      async function loadZones() {
        try {
          const response = await fetch('http://localhost:8080/zones');
          const zones = await response.json();
          
          const tbody = document.getElementById('zone-table-body');
          tbody.innerHTML = '';
          
          zones.forEach(zone => {
            const isOpen = zone.is_open === 'True';
            const statusColor = isOpen ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800';
            const statusText = isOpen ? 'On' : 'Off';
            
            const row = document.createElement('tr');
            row.className = 'border-t border-t-[#d0dde7]';
            
            row.innerHTML = `
              <td class="table-d641b1a4-d5fb-4b0a-ac44-f198b9246e08-column-120 h-[72px] px-4 py-2 w-[400px] text-[#0e151b] text-sm font-normal leading-normal">
                ${zone.name}
              </td>
              <td class="table-d641b1a4-d5fb-4b0a-ac44-f198b9246e08-column-240 h-[72px] px-4 py-2 w-60 text-sm font-normal leading-normal">
                <button
                  onclick="toggleZone(${zone.id}, ${isOpen})"
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-8 px-4 ${statusColor} text-sm font-medium leading-normal w-full transition-colors hover:opacity-80"
                >
                  <span class="truncate">${statusText}</span>
                </button>
              </td>
              <td class="table-d641b1a4-d5fb-4b0a-ac44-f198b9246e08-column-360 h-[72px] px-4 py-2 w-[400px] text-[#4e7997] text-sm font-normal leading-normal">
                ${getNextIrrigation(zone.irrigation_info)}
              </td>
            `;
            
            tbody.appendChild(row);
          });
          
        } catch (error) {
          console.error('Error loading zones:', error);
          const tbody = document.getElementById('zone-table-body');
          tbody.innerHTML = '<tr><td colspan="3" class="text-center py-4 text-red-500">Error loading zones. Please check if the API is running.</td></tr>';
        }
      }

      // Function to handle manual control buttons
      async function controlAllZones(action) {
        try {
          const response = await fetch('http://localhost:8080/zones');
          const zones = await response.json();
          
          // Send requests for all zones
          const promises = zones.map(zone => 
            fetch(`http://localhost:8080/zones/${zone.id}/${action}`, { method: 'POST' })
          );
          
          await Promise.all(promises);
          loadZones(); // Refresh after all operations
        } catch (error) {
          console.error(`Error ${action}ing all zones:`, error);
        }
      }

      // Update manual control buttons
      document.addEventListener('DOMContentLoaded', function() {
        // Find and update the manual control buttons
        const buttons = document.querySelectorAll('button');
        buttons.forEach(button => {
          const text = button.textContent.trim();
          if (text === 'Turn All Zones On') {
            button.onclick = () => controlAllZones('open');
          } else if (text === 'Turn All Zones Off') {
            button.onclick = () => controlAllZones('close');
          }
        });
        
        // Load zones on page load
        loadZones();
        
        // Refresh zones every 10 seconds
        setInterval(loadZones, 10000);
      });
    </script>
  </body>
</html>
